#include<stdio.h>
#include <stdlib.h>

int no;
int rem,count;
int chkprocess(int);
int nextprocess();
void roundrobin(int, int, int[], int[], int[]);
void srtf();

int main()
{
  	int n,tq,choice;
  	int bt[10],rt[10],at[10],i,j,k;
       
while(1)
{
	printf(" 1. Round Robin\n 2. SRT\n 3. Exit \n");
	printf("Enter your choice\t");
	scanf("%d",&choice);
	switch(choice)
	{
	case 1: 	printf("Round Robin scheduling algorithm\n");
               		printf("Enter Total Process:\t "); 
               		scanf("%d",&n); 
               		int tq; 
               		for(count=0;count<n;count++) 
               		{ 
                  		printf("Enter Arrival Time and Burst Time for Process Number %d P:",count+1); 
                  		scanf("%d",&at[count]); 
                  		scanf("%d",&bt[count]); 
                  		rt[count]=bt[count]; 
               	         } 
                	printf("Enter Time Quantum:\t"); 
                	scanf("%d",&tq); 
   			roundrobin(n,tq,rt,bt,at);
   			break;
	case 2:	printf("\n---SHORTEST REMAINING TIME FIRST---\n ");		
		srtf();
		break;
	case 3: exit(0);
	}// end of switch
}// end of for
	return 0;
}//end of main()

void  roundrobin(int n,int tq,int rt[],int bt[],int at[])
 {
        int time=0, count=0, time_quantum=tq, flag;
        int wait_time=0,turnaround_time=0;
        rem=n;
        printf("%d",rem);
  	printf("\n\nProcess\t|Turnaround Time|Waiting Time\n\n"); 
  	for(time=0,count=0;rem!=0;) 
  	{ 
    		if(rt[count]<=time_quantum && rt[count]>0) 
    		{ 
      			time+=rt[count]; 
      			rt[count]=0; 
      			flag=1; 
    		} 
    		else if(rt[count]>0) 
    		{ 
      			rt[count]-=time_quantum; 
      			time+=time_quantum; 
    		} 
   		 if(rt[count]==0 && flag==1) 
    		{ 
      			rem--; 
      			printf("P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count]); 
      			wait_time+=time-at[count]-bt[count]; 
      			turnaround_time+=time-at[count]; 
      			flag=0; 
    		} 
    		if(count==n-1) 
      		count=0; 
    		else if(at[count+1]<=time) 
      			count++; 
    			else 
      			count=0; 
  		} 
  printf("\nAverage Waiting Time= %f\n",wait_time*1.0/n); 
  printf("Avg Turnaround Time = %f",turnaround_time*1.0/n);
	exit(0);
 }


void srtf()
{   int wait_time=0,turnaround_time=0,rt[10],at[10],bt[10];
    int endTime,i,smallest,n;
    int remain=0,time;
    printf("Enter no of Processes : ");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Enter arrival time for Process P%d : ",i+1);
        scanf("%d",&at[i]);
        printf("Enter burst time for Process P%d : ",i+1);
        scanf("%d",&bt[i]);
        rt[i]=bt[i];
    }
    printf("\n\nProcess\t|Turnaround Time| Waiting Time\n\n");
    rt[9]=9999;
    for(time=0;remain!=n;time++)
    {
        smallest=9;
        for(i=0;i<n;i++)
        {
            if(at[i]<=time && rt[i]<rt[smallest] && rt[i]>0)
            {
                smallest=i;
            }
        }
        rt[smallest]--;
        if(rt[smallest]==0)
        {
            remain++;
            endTime=time+1;
            printf("\nP[%d]\t|\t%d\t|\t%d",smallest+1,endTime-at[smallest],endTime-bt[smallest]-at[smallest]);
            wait_time+=endTime-bt[smallest]-at[smallest];
            turnaround_time+=endTime-at[smallest];
        }
    }
    printf("\n\nAverage waiting time = %f\n",wait_time*1.0/n);
    printf("Average Turnaround time = %f\n",turnaround_time*1.0/n);
	exit(0);
}
